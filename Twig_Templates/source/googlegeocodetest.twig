
{% extends "fullwidth.twig" %}

{% block content %}



<script>

function formSubmitAction(){
  alert("number one");
  return false;
}

function formSubmitAction2(){
  alert("number two");
  return false;
}

  $(function(){
    $("#registration").validate({
      rules:{
        locality: {required: true},
        lat: {required: true},
        locationDescription: {required:true},
        eventDescription: {required:true}
      },
      messages:{
        locality: "Thou shalt enter the locality",
        lat: "required",
        locationDescription: "Thou shalt enter the location description",
        eventDescription: "Thou shalt enter the event description"
      },
      submitHandler: function(form){
        //form.submit();
        formSubmitAction2();
      }
    });
  });
</script>







    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    </style>
    <link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
    <style>
      #locationField, #controls {
        position: relative;
        width: 480px;
      }
      #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
      }
      .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
      }
      #address {
        border: 1px solid #000090;
        background-color: #f0f0ff;
        width: 480px;
        padding-right: 2px;
      }
      #address td {
        font-size: 10pt;
      }
      .field {
        width: 99%;
      }
      .slimField {
        width: 80px;
      }
      .wideField {
        width: 200px;
      }
      #locationField {
        height: 20px;
        margin-bottom: 2px;
      }
    </style>
  </head>

  <body>


    <div id="locationField">
      <input id="autocomplete" placeholder="Start typing the location..." onFocus="geolocate()" type="text">
      </input>
    </div>
    <br><br>


    <form name = "registration" id="registration">
        <table id="address">


          <tr>
            <td class="label">Location Description</td>
            <td class="wideField" colspan="3">
              <input class="field" id="locationDescription" name="locationDescription">
              </input>
            </td>
          </tr>

          <tr>
            <td class="label">Event Description</td>
            <td class="wideField" colspan="3">
              <input class="field" id="eventDescription" name="eventDescription">
              </input>
            </td>
          </tr>

          <tr>
            <td class="label">Is Hyper ?</td>
            <td class="wideField" colspan="3">
              <input class="field" id="hyperIndicator" name="hyperIndicator">
              </input>
            </td>
          </tr>

          <tr>
            <td class="label">Select Kennel</td>
            <td class="wideField" colspan="3">
              <input class="field" id="kennelIndicator" name="kennelIndicator">
              </input>
            </td>
          </tr>

          <tr>
            <td class="label">Kennel Event Number</td>
            <td class="wideField" colspan="3">
              <input class="field" id="kennelEventNumber" name="kennelEventNumber">
              </input>
            </td>
          </tr>



          <tr>
            <td class="label">Event Date 2</td>
            <td class="wideField" colspan="3">
              <input type = "text" id = "datepicker">
              <script>
                $("#datepicker").datepicker({
                  showOn: "focus"
                });
              </script>

            </td>
          </tr>

          <tr>
            <td class="label">Event Time</td>
            <td class="wideField" colspan="3">
              <input class="field" id="eventTime" name="eventTime">
              <script>
                $('#eventTime').timepicker({
                  timeFormat:'hh:mm p',
                  interval: 30,
                  minTime:'10:00am',
                  maxTime:'07:00pm',
                  defaultTime: '15:00',
                  startTime: '10:00am',
                  dynamic: false,
                  dropdown: true,
                  scrollbar: true
                })
              </script>
            </td>
          </tr>

          <tr>
            <td class="label">Street address</td>
            <td class="slimField"><input class="field" id="street_number" disabled="true"></input></td>
            <td class="wideField"><input class="field" id="route" disabled="true"></input></td>
          </tr>

          <tr>
            <td class="label">City</td>
            <!-- Note: Selection of address components in this example is typical.
                 You may need to adjust it for the locations relevant to your app. See
                 https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
            -->
            <td class="wideField" colspan="3"><input class="field" id="locality" name="locality" disabled="true"></input></td>
          </tr>

          <tr>
            <td class="label">State</td>
            <td class="slimField"><input class="field" id="administrative_area_level_1" name="administrative_area_level_1" disabled="true"></input></td>
            <td class="label">Zip code</td>
            <td class="wideField"><input class="field" id="postal_code" name="postal_code" disabled="true"></input></td>
          </tr>

            <td class="label">Administrative Area Level 2</td>
            <td class="wideField" colspan="3"><input class="field" id="administrative_area_level_2" name="administrative_area_level_2" disabled="true"></input></td>
          <tr>
          </tr>
            <td class="label">Sublocality</td>
            <td class="wideField" colspan="3"><input class="field" id="sublocality" name="sublocality" disabled="true"></input></td>
          <tr>
          </tr>
            <td class="label">Neighborhood</td>
            <td class="wideField" colspan="3"><input class="field" id="neighborhood" name="neighborhood" disabled="true"></input></td>
          <tr>
          </tr>
          <tr>
            <td class="label">Country</td>
            <td class="wideField" colspan="3"><input class="field" id="country" name="country" disabled="true"></input></td>
          </tr>
          <tr>
          <td class="label">Lat</td>
          <td class="wideField" colspan="3"><input class="field" id="lat" name="lat" disabled="true"></input></td>
        </tr>
        <tr>
          <td class="label">Long</td>
          <td class="wideField" colspan="3"><input class="field" id="lng" name="lng" disabled="true"></input></td>
        </tr>
        <tr>
          <td class="label">Formatted Address</td>
          <td class="wideField" colspan="3"><input class="field" id="formatted_address" name="formatted_address" disabled="true"></input></td>
        </tr>
    </table>
    <button type = "submit">Enter The Data</button>
  </form>



    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        administrative_area_level_2: 'short_name',
        sublocality: 'short_name',
        country: 'long_name',
        postal_code: 'short_name',
        neighborhood: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: []});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        var lat = place.geometry.location.lat();
        var lng = place.geometry.location.lng();
        var formattedAddress = place.formatted_address;
        document.getElementById("lat").value=lat;
        document.getElementById("lng").value=lng;
        document.getElementById("formatted_address").value=formattedAddress;
        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
            //document.getElementById(addressType).disabled= true;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDxx2Alzk2teKEg66gp59dqgSLUkFk7DLQ&libraries=places&callback=initAutocomplete"
        async defer></script>

</div>



{% endblock %}
